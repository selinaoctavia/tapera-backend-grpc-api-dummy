// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: pendaftaranpesertabri_message.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SIDGenerationStatus int32

const (
	SIDGenerationStatus_UNKNOWN_SID_GENERATION_STATUS SIDGenerationStatus = 0
	SIDGenerationStatus_COMPLETED                     SIDGenerationStatus = 1 //SID is generated
	SIDGenerationStatus_NA                            SIDGenerationStatus = 2 //Irrelevant of SID generation
	SIDGenerationStatus_FAILED                        SIDGenerationStatus = 3 //SID generation is failed
)

// Enum value maps for SIDGenerationStatus.
var (
	SIDGenerationStatus_name = map[int32]string{
		0: "UNKNOWN_SID_GENERATION_STATUS",
		1: "COMPLETED",
		2: "NA",
		3: "FAILED",
	}
	SIDGenerationStatus_value = map[string]int32{
		"UNKNOWN_SID_GENERATION_STATUS": 0,
		"COMPLETED":                     1,
		"NA":                            2,
		"FAILED":                        3,
	}
)

func (x SIDGenerationStatus) Enum() *SIDGenerationStatus {
	p := new(SIDGenerationStatus)
	*p = x
	return p
}

func (x SIDGenerationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIDGenerationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[0].Descriptor()
}

func (SIDGenerationStatus) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[0]
}

func (x SIDGenerationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIDGenerationStatus.Descriptor instead.
func (SIDGenerationStatus) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{0}
}

type Identification int32

const (
	Identification_UNKNOWN_IDENTIFICATION Identification = 0
	Identification_KTP                    Identification = 1
	Identification_PASSPORT               Identification = 2
)

// Enum value maps for Identification.
var (
	Identification_name = map[int32]string{
		0: "UNKNOWN_IDENTIFICATION",
		1: "KTP",
		2: "PASSPORT",
	}
	Identification_value = map[string]int32{
		"UNKNOWN_IDENTIFICATION": 0,
		"KTP":                    1,
		"PASSPORT":               2,
	}
)

func (x Identification) Enum() *Identification {
	p := new(Identification)
	*p = x
	return p
}

func (x Identification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identification) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[1].Descriptor()
}

func (Identification) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[1]
}

func (x Identification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identification.Descriptor instead.
func (Identification) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{1}
}

type Gender int32

const (
	Gender_UNKNOWN_GENDER Gender = 0
	Gender_MALE           Gender = 1
	Gender_FEMALE         Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "UNKNOWN_GENDER",
		1: "MALE",
		2: "FEMALE",
	}
	Gender_value = map[string]int32{
		"UNKNOWN_GENDER": 0,
		"MALE":           1,
		"FEMALE":         2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[2].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[2]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{2}
}

type EducationalBackground int32

const (
	EducationalBackground_UNKNOWN_EDUCATIONAL_BACKGROUND EducationalBackground = 0
	EducationalBackground_PRIMARY_SCHOOL                 EducationalBackground = 1
	EducationalBackground_JUNIOR_HIGH_SCHOOL             EducationalBackground = 2
	EducationalBackground_SENIOR_HIGH_SCHOOL             EducationalBackground = 3
	EducationalBackground_DIPLOMA                        EducationalBackground = 4
	EducationalBackground_UNDERGRADUATE                  EducationalBackground = 5
	EducationalBackground_POST_GRADUATE                  EducationalBackground = 6
	EducationalBackground_DOCTORAL_PROGRAM               EducationalBackground = 7
	EducationalBackground_OTHER_EDUCATIONAL_BACKGROUND   EducationalBackground = 8
)

// Enum value maps for EducationalBackground.
var (
	EducationalBackground_name = map[int32]string{
		0: "UNKNOWN_EDUCATIONAL_BACKGROUND",
		1: "PRIMARY_SCHOOL",
		2: "JUNIOR_HIGH_SCHOOL",
		3: "SENIOR_HIGH_SCHOOL",
		4: "DIPLOMA",
		5: "UNDERGRADUATE",
		6: "POST_GRADUATE",
		7: "DOCTORAL_PROGRAM",
		8: "OTHER_EDUCATIONAL_BACKGROUND",
	}
	EducationalBackground_value = map[string]int32{
		"UNKNOWN_EDUCATIONAL_BACKGROUND": 0,
		"PRIMARY_SCHOOL":                 1,
		"JUNIOR_HIGH_SCHOOL":             2,
		"SENIOR_HIGH_SCHOOL":             3,
		"DIPLOMA":                        4,
		"UNDERGRADUATE":                  5,
		"POST_GRADUATE":                  6,
		"DOCTORAL_PROGRAM":               7,
		"OTHER_EDUCATIONAL_BACKGROUND":   8,
	}
)

func (x EducationalBackground) Enum() *EducationalBackground {
	p := new(EducationalBackground)
	*p = x
	return p
}

func (x EducationalBackground) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EducationalBackground) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[3].Descriptor()
}

func (EducationalBackground) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[3]
}

func (x EducationalBackground) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EducationalBackground.Descriptor instead.
func (EducationalBackground) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{3}
}

type Religion int32

const (
	Religion_UNKNOWN_RELIGION Religion = 0
	Religion_ISLAM            Religion = 1
	Religion_PROTESTANT       Religion = 2
	Religion_CATHOLIC         Religion = 3
	Religion_HINDUISM         Religion = 4
	Religion_BUDHISM          Religion = 5
	Religion_CONFUCIANISM     Religion = 6
	Religion_OTHER_RELIGION   Religion = 7
)

// Enum value maps for Religion.
var (
	Religion_name = map[int32]string{
		0: "UNKNOWN_RELIGION",
		1: "ISLAM",
		2: "PROTESTANT",
		3: "CATHOLIC",
		4: "HINDUISM",
		5: "BUDHISM",
		6: "CONFUCIANISM",
		7: "OTHER_RELIGION",
	}
	Religion_value = map[string]int32{
		"UNKNOWN_RELIGION": 0,
		"ISLAM":            1,
		"PROTESTANT":       2,
		"CATHOLIC":         3,
		"HINDUISM":         4,
		"BUDHISM":          5,
		"CONFUCIANISM":     6,
		"OTHER_RELIGION":   7,
	}
)

func (x Religion) Enum() *Religion {
	p := new(Religion)
	*p = x
	return p
}

func (x Religion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Religion) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[4].Descriptor()
}

func (Religion) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[4]
}

func (x Religion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Religion.Descriptor instead.
func (Religion) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{4}
}

type Occupation int32

const (
	Occupation_UNKNOWN_OCCUPATION                       Occupation = 0
	Occupation_STUDENT                                  Occupation = 1
	Occupation_HOUSEWIFE                                Occupation = 2
	Occupation_ENTERPRENEUR                             Occupation = 3
	Occupation_CIVIL_SERVANT                            Occupation = 4
	Occupation_INDONESIA_NATIONAL_ARMED_FORCE_OR_POLICE Occupation = 5
	Occupation_RETIREMENT                               Occupation = 6
	Occupation_LECTURER_OR_TEACHER                      Occupation = 7
	Occupation_PRIVATE_EMPLOYEE                         Occupation = 8
	Occupation_OTHER_OCCUPATION                         Occupation = 9
)

// Enum value maps for Occupation.
var (
	Occupation_name = map[int32]string{
		0: "UNKNOWN_OCCUPATION",
		1: "STUDENT",
		2: "HOUSEWIFE",
		3: "ENTERPRENEUR",
		4: "CIVIL_SERVANT",
		5: "INDONESIA_NATIONAL_ARMED_FORCE_OR_POLICE",
		6: "RETIREMENT",
		7: "LECTURER_OR_TEACHER",
		8: "PRIVATE_EMPLOYEE",
		9: "OTHER_OCCUPATION",
	}
	Occupation_value = map[string]int32{
		"UNKNOWN_OCCUPATION": 0,
		"STUDENT":            1,
		"HOUSEWIFE":          2,
		"ENTERPRENEUR":       3,
		"CIVIL_SERVANT":      4,
		"INDONESIA_NATIONAL_ARMED_FORCE_OR_POLICE": 5,
		"RETIREMENT":          6,
		"LECTURER_OR_TEACHER": 7,
		"PRIVATE_EMPLOYEE":    8,
		"OTHER_OCCUPATION":    9,
	}
)

func (x Occupation) Enum() *Occupation {
	p := new(Occupation)
	*p = x
	return p
}

func (x Occupation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Occupation) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[5].Descriptor()
}

func (Occupation) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[5]
}

func (x Occupation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Occupation.Descriptor instead.
func (Occupation) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{5}
}

type IncomeLevel int32

const (
	IncomeLevel_UNKNOWN_INCOME_LEVEL                   IncomeLevel = 0
	IncomeLevel_LESS_THAN_10_MILLION_PER_YEAR          IncomeLevel = 1
	IncomeLevel_BETWEEN_10_UNTIL_50_MILLION_PER_YEAR   IncomeLevel = 2
	IncomeLevel_BETWEEN_50_UNTIL_100_MILLION_PER_YEAR  IncomeLevel = 3
	IncomeLevel_BETWEEN_100_UNTIL_500_MILLION_PER_YEAR IncomeLevel = 4
	IncomeLevel_BETWEEN_500_UNTIL_1_BILLION_PER_YEAR   IncomeLevel = 5
	IncomeLevel_MORE_THAN_1_BILLION_PER_YEAR           IncomeLevel = 6
)

// Enum value maps for IncomeLevel.
var (
	IncomeLevel_name = map[int32]string{
		0: "UNKNOWN_INCOME_LEVEL",
		1: "LESS_THAN_10_MILLION_PER_YEAR",
		2: "BETWEEN_10_UNTIL_50_MILLION_PER_YEAR",
		3: "BETWEEN_50_UNTIL_100_MILLION_PER_YEAR",
		4: "BETWEEN_100_UNTIL_500_MILLION_PER_YEAR",
		5: "BETWEEN_500_UNTIL_1_BILLION_PER_YEAR",
		6: "MORE_THAN_1_BILLION_PER_YEAR",
	}
	IncomeLevel_value = map[string]int32{
		"UNKNOWN_INCOME_LEVEL":                   0,
		"LESS_THAN_10_MILLION_PER_YEAR":          1,
		"BETWEEN_10_UNTIL_50_MILLION_PER_YEAR":   2,
		"BETWEEN_50_UNTIL_100_MILLION_PER_YEAR":  3,
		"BETWEEN_100_UNTIL_500_MILLION_PER_YEAR": 4,
		"BETWEEN_500_UNTIL_1_BILLION_PER_YEAR":   5,
		"MORE_THAN_1_BILLION_PER_YEAR":           6,
	}
)

func (x IncomeLevel) Enum() *IncomeLevel {
	p := new(IncomeLevel)
	*p = x
	return p
}

func (x IncomeLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncomeLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[6].Descriptor()
}

func (IncomeLevel) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[6]
}

func (x IncomeLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncomeLevel.Descriptor instead.
func (IncomeLevel) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{6}
}

type MaritalStatus int32

const (
	MaritalStatus_UNKNOWN_MARITALSTATUS MaritalStatus = 0
	MaritalStatus_SINGLE                MaritalStatus = 1
	MaritalStatus_MARRIED               MaritalStatus = 2
	MaritalStatus_DIVORCE               MaritalStatus = 3
)

// Enum value maps for MaritalStatus.
var (
	MaritalStatus_name = map[int32]string{
		0: "UNKNOWN_MARITALSTATUS",
		1: "SINGLE",
		2: "MARRIED",
		3: "DIVORCE",
	}
	MaritalStatus_value = map[string]int32{
		"UNKNOWN_MARITALSTATUS": 0,
		"SINGLE":                1,
		"MARRIED":               2,
		"DIVORCE":               3,
	}
)

func (x MaritalStatus) Enum() *MaritalStatus {
	p := new(MaritalStatus)
	*p = x
	return p
}

func (x MaritalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaritalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[7].Descriptor()
}

func (MaritalStatus) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[7]
}

func (x MaritalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaritalStatus.Descriptor instead.
func (MaritalStatus) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{7}
}

type RiskProfile int32

const (
	RiskProfile_UNKNOWN_RISK_PROFILE RiskProfile = 0
	RiskProfile_LOW                  RiskProfile = 1
	RiskProfile_LOW_TO_MODERATE      RiskProfile = 2
	RiskProfile_MODERATE             RiskProfile = 3
	RiskProfile_MODERATE_TOHIGH      RiskProfile = 4
	RiskProfile_HIGH                 RiskProfile = 5
)

// Enum value maps for RiskProfile.
var (
	RiskProfile_name = map[int32]string{
		0: "UNKNOWN_RISK_PROFILE",
		1: "LOW",
		2: "LOW_TO_MODERATE",
		3: "MODERATE",
		4: "MODERATE_TOHIGH",
		5: "HIGH",
	}
	RiskProfile_value = map[string]int32{
		"UNKNOWN_RISK_PROFILE": 0,
		"LOW":                  1,
		"LOW_TO_MODERATE":      2,
		"MODERATE":             3,
		"MODERATE_TOHIGH":      4,
		"HIGH":                 5,
	}
)

func (x RiskProfile) Enum() *RiskProfile {
	p := new(RiskProfile)
	*p = x
	return p
}

func (x RiskProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[8].Descriptor()
}

func (RiskProfile) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[8]
}

func (x RiskProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskProfile.Descriptor instead.
func (RiskProfile) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{8}
}

type InvestmentObjective int32

const (
	InvestmentObjective_UNKNOWN_INVESTMENT_OBJECTIVE InvestmentObjective = 0
	InvestmentObjective_GAIN_FORM_PRICE_MARGIN       InvestmentObjective = 1
	InvestmentObjective_INVESTMENT                   InvestmentObjective = 2
	InvestmentObjective_SPECULATION                  InvestmentObjective = 3
	InvestmentObjective_OBTAIN_THE_REVENUE           InvestmentObjective = 4
	InvestmentObjective_OTHER_INVESTMENT_OBJECTIVE   InvestmentObjective = 5
)

// Enum value maps for InvestmentObjective.
var (
	InvestmentObjective_name = map[int32]string{
		0: "UNKNOWN_INVESTMENT_OBJECTIVE",
		1: "GAIN_FORM_PRICE_MARGIN",
		2: "INVESTMENT",
		3: "SPECULATION",
		4: "OBTAIN_THE_REVENUE",
		5: "OTHER_INVESTMENT_OBJECTIVE",
	}
	InvestmentObjective_value = map[string]int32{
		"UNKNOWN_INVESTMENT_OBJECTIVE": 0,
		"GAIN_FORM_PRICE_MARGIN":       1,
		"INVESTMENT":                   2,
		"SPECULATION":                  3,
		"OBTAIN_THE_REVENUE":           4,
		"OTHER_INVESTMENT_OBJECTIVE":   5,
	}
)

func (x InvestmentObjective) Enum() *InvestmentObjective {
	p := new(InvestmentObjective)
	*p = x
	return p
}

func (x InvestmentObjective) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestmentObjective) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[9].Descriptor()
}

func (InvestmentObjective) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[9]
}

func (x InvestmentObjective) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestmentObjective.Descriptor instead.
func (InvestmentObjective) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{9}
}

type SourceOfFund int32

const (
	SourceOfFund_UNKNOWN_SOURCE_OF_FUND        SourceOfFund = 0
	SourceOfFund_REVENUE                       SourceOfFund = 1
	SourceOfFund_BUSINESS_PROFIT               SourceOfFund = 2
	SourceOfFund_SAVING_INTEREST               SourceOfFund = 3
	SourceOfFund_LEGACY                        SourceOfFund = 4
	SourceOfFund_FUND_FROM_PARENTS_OR_CHILDREN SourceOfFund = 5
	SourceOfFund_GRANT                         SourceOfFund = 6
	SourceOfFund_FUND_FROM_HUSBAND_OR_WIFE     SourceOfFund = 7
	SourceOfFund_DRAWING                       SourceOfFund = 8
	SourceOfFund_INVESTMENT_GAIN               SourceOfFund = 9
	SourceOfFund_OTHER_SOURCE_OF_FUND          SourceOfFund = 10
)

// Enum value maps for SourceOfFund.
var (
	SourceOfFund_name = map[int32]string{
		0:  "UNKNOWN_SOURCE_OF_FUND",
		1:  "REVENUE",
		2:  "BUSINESS_PROFIT",
		3:  "SAVING_INTEREST",
		4:  "LEGACY",
		5:  "FUND_FROM_PARENTS_OR_CHILDREN",
		6:  "GRANT",
		7:  "FUND_FROM_HUSBAND_OR_WIFE",
		8:  "DRAWING",
		9:  "INVESTMENT_GAIN",
		10: "OTHER_SOURCE_OF_FUND",
	}
	SourceOfFund_value = map[string]int32{
		"UNKNOWN_SOURCE_OF_FUND":        0,
		"REVENUE":                       1,
		"BUSINESS_PROFIT":               2,
		"SAVING_INTEREST":               3,
		"LEGACY":                        4,
		"FUND_FROM_PARENTS_OR_CHILDREN": 5,
		"GRANT":                         6,
		"FUND_FROM_HUSBAND_OR_WIFE":     7,
		"DRAWING":                       8,
		"INVESTMENT_GAIN":               9,
		"OTHER_SOURCE_OF_FUND":          10,
	}
)

func (x SourceOfFund) Enum() *SourceOfFund {
	p := new(SourceOfFund)
	*p = x
	return p
}

func (x SourceOfFund) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceOfFund) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[10].Descriptor()
}

func (SourceOfFund) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[10]
}

func (x SourceOfFund) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceOfFund.Descriptor instead.
func (SourceOfFund) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{10}
}

type AssetOwner int32

const (
	AssetOwner_UNKNOWN_ASSET_OWNER      AssetOwner = 0
	AssetOwner_MYSELF                   AssetOwner = 1
	AssetOwner_REPRESENTING_OTHER_PARTY AssetOwner = 2
)

// Enum value maps for AssetOwner.
var (
	AssetOwner_name = map[int32]string{
		0: "UNKNOWN_ASSET_OWNER",
		1: "MYSELF",
		2: "REPRESENTING_OTHER_PARTY",
	}
	AssetOwner_value = map[string]int32{
		"UNKNOWN_ASSET_OWNER":      0,
		"MYSELF":                   1,
		"REPRESENTING_OTHER_PARTY": 2,
	}
)

func (x AssetOwner) Enum() *AssetOwner {
	p := new(AssetOwner)
	*p = x
	return p
}

func (x AssetOwner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetOwner) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[11].Descriptor()
}

func (AssetOwner) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[11]
}

func (x AssetOwner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetOwner.Descriptor instead.
func (AssetOwner) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{11}
}

type StatementType int32

const (
	StatementType_UNKNOWN_STATEMENT_TYPE StatementType = 0
	StatementType_HARDCOPY               StatementType = 1
	StatementType_ESTATEMENT             StatementType = 2
)

// Enum value maps for StatementType.
var (
	StatementType_name = map[int32]string{
		0: "UNKNOWN_STATEMENT_TYPE",
		1: "HARDCOPY",
		2: "ESTATEMENT",
	}
	StatementType_value = map[string]int32{
		"UNKNOWN_STATEMENT_TYPE": 0,
		"HARDCOPY":               1,
		"ESTATEMENT":             2,
	}
)

func (x StatementType) Enum() *StatementType {
	p := new(StatementType)
	*p = x
	return p
}

func (x StatementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatementType) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[12].Descriptor()
}

func (StatementType) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[12]
}

func (x StatementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatementType.Descriptor instead.
func (StatementType) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{12}
}

type Fatca int32

const (
	Fatca_UNKNOWN_FATCHA                                 Fatca = 0
	Fatca_US_PERSON                                      Fatca = 1
	Fatca_NON_US_PERSON                                  Fatca = 2
	Fatca_RECALCITRANT_ACCOUNT_HOLDER_WITH_US_INDICIA    Fatca = 3
	Fatca_RECALCITRANT_ACCOUNT_HOLDER_WITHOUT_US_INDICIA Fatca = 4
	Fatca_DORMANT_ACCOUNT                                Fatca = 5
)

// Enum value maps for Fatca.
var (
	Fatca_name = map[int32]string{
		0: "UNKNOWN_FATCHA",
		1: "US_PERSON",
		2: "NON_US_PERSON",
		3: "RECALCITRANT_ACCOUNT_HOLDER_WITH_US_INDICIA",
		4: "RECALCITRANT_ACCOUNT_HOLDER_WITHOUT_US_INDICIA",
		5: "DORMANT_ACCOUNT",
	}
	Fatca_value = map[string]int32{
		"UNKNOWN_FATCHA": 0,
		"US_PERSON":      1,
		"NON_US_PERSON":  2,
		"RECALCITRANT_ACCOUNT_HOLDER_WITH_US_INDICIA":    3,
		"RECALCITRANT_ACCOUNT_HOLDER_WITHOUT_US_INDICIA": 4,
		"DORMANT_ACCOUNT": 5,
	}
)

func (x Fatca) Enum() *Fatca {
	p := new(Fatca)
	*p = x
	return p
}

func (x Fatca) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fatca) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[13].Descriptor()
}

func (Fatca) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[13]
}

func (x Fatca) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fatca.Descriptor instead.
func (Fatca) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{13}
}

type Type int32

const (
	Type_UNKNOWN_TYPE Type = 0
	Type_INPUT        Type = 1
	Type_AMENDMENT    Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "INPUT",
		2: "AMENDMENT",
	}
	Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"INPUT":        1,
		"AMENDMENT":    2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[14].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[14]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{14}
}

type InvestorType int32

const (
	InvestorType_UNKNOWN_INVESTOR_TYPE InvestorType = 0
	InvestorType_INDIVIDUAL            InvestorType = 1
	InvestorType_INSTITUTIONAL         InvestorType = 2
)

// Enum value maps for InvestorType.
var (
	InvestorType_name = map[int32]string{
		0: "UNKNOWN_INVESTOR_TYPE",
		1: "INDIVIDUAL",
		2: "INSTITUTIONAL",
	}
	InvestorType_value = map[string]int32{
		"UNKNOWN_INVESTOR_TYPE": 0,
		"INDIVIDUAL":            1,
		"INSTITUTIONAL":         2,
	}
)

func (x InvestorType) Enum() *InvestorType {
	p := new(InvestorType)
	*p = x
	return p
}

func (x InvestorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestorType) Descriptor() protoreflect.EnumDescriptor {
	return file_pendaftaranpesertabri_message_proto_enumTypes[15].Descriptor()
}

func (InvestorType) Type() protoreflect.EnumType {
	return &file_pendaftaranpesertabri_message_proto_enumTypes[15]
}

func (x InvestorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestorType.Descriptor instead.
func (InvestorType) EnumDescriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{15}
}

//message data for service Pendaftaran Peserta Request
type PendaftaranPesertaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Processing date (Mandatory) : tanggal data nasabah sukses diproses di S-INVEST
	//Format : yyyymmdd
	//Example : "20201231"
	ProcessingDate string `protobuf:"bytes,1,opt,name=processing_date,json=processingDate,proto3" json:"processing_date,omitempty"`
	//Processing time (Mandatory) : waktu/jam data nasabah sukses diproses di S-INVEST
	//Format : hhmiss
	//Example : "154520"
	ProcessingTime string `protobuf:"bytes,2,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"`
	//SA Code (Mandatory) : kode BP TAPERA
	//Format : char(5)
	//Example : "DBSI1"
	SaCode string `protobuf:"bytes,3,opt,name=sa_code,json=saCode,proto3" json:"sa_code,omitempty"`
	//SID (Mandatory) : SID peserta
	//Format : char(15)
	//Example : "GBU114"
	Sid string `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`
	//SID Generation Status (Mandatory)
	SidGenerationStatus SIDGenerationStatus `protobuf:"varint,5,opt,name=sid_generation_status,json=sidGenerationStatus,proto3,enum=pendaftaranpesertabri.SIDGenerationStatus" json:"sid_generation_status,omitempty"`
	//New SID : Indicated only when the SID is changed due to amendment
	//Format : char(15)
	//Example : "GBU115"
	NewSid string `protobuf:"bytes,6,opt,name=new_sid,json=newSid,proto3" json:"new_sid,omitempty"`
	//First Name (Mandatory)
	//Format : char(100)
	//Example : "NASABAHFRIST"
	FirstName string `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	//Format : char(30)
	//Example : "NASABAHMIDDLE"
	MiddleName string `protobuf:"bytes,8,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	//Format : char(30)
	//Example : "NASABAHLAST"
	LastName string `protobuf:"bytes,9,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	//Country of Nationality : ISO Country Code
	//Format : alphabet(2)
	//Example : "ID"
	Nationality    string         `protobuf:"bytes,10,opt,name=nationality,proto3" json:"nationality,omitempty"`
	Identification Identification `protobuf:"varint,11,opt,name=identification,proto3,enum=pendaftaranpesertabri.Identification" json:"identification,omitempty"`
	//ID No : Nomor identitas
	//Format : char(20)
	//Example : "1774647877"
	IdNo string `protobuf:"bytes,12,opt,name=id_no,json=idNo,proto3" json:"id_no,omitempty"`
	//ID Expiration Date
	//Format : yyyymmdd
	//Example : "20201231"
	IdExpDate string `protobuf:"bytes,13,opt,name=id_exp_date,json=idExpDate,proto3" json:"id_exp_date,omitempty"`
	//Format : number(15)
	//Example : "1774647877"
	NpwpNo string `protobuf:"bytes,14,opt,name=npwp_no,json=npwpNo,proto3" json:"npwp_no,omitempty"`
	//NPWP Registration Date
	//Format : yyyymmdd
	//Example : "20201231"
	NpwpDate string `protobuf:"bytes,15,opt,name=npwp_date,json=npwpDate,proto3" json:"npwp_date,omitempty"`
	//Country of Birth : ISO Country Code
	//Format : alphabet(2)
	//Example : "ID"
	BirthCountry string `protobuf:"bytes,16,opt,name=birth_country,json=birthCountry,proto3" json:"birth_country,omitempty"`
	//Place of Birth
	//Format : char(100)
	//Example : "SIGUMPAR"
	BirthPlace string `protobuf:"bytes,17,opt,name=birth_place,json=birthPlace,proto3" json:"birth_place,omitempty"`
	//Date of Birth
	//Format : yyyymmdd
	//Example : "19880101"
	BirthDate           string                `protobuf:"bytes,18,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Gender              Gender                `protobuf:"varint,19,opt,name=gender,proto3,enum=pendaftaranpesertabri.Gender" json:"gender,omitempty"`
	EducationBackground EducationalBackground `protobuf:"varint,20,opt,name=education_background,json=educationBackground,proto3,enum=pendaftaranpesertabri.EducationalBackground" json:"education_background,omitempty"`
	//Mother's Maiden Name
	//Format : char(100)
	//Example : "MOTHERNAME"
	MotherName    string        `protobuf:"bytes,21,opt,name=mother_name,json=motherName,proto3" json:"mother_name,omitempty"`
	Religion      Religion      `protobuf:"varint,22,opt,name=religion,proto3,enum=pendaftaranpesertabri.Religion" json:"religion,omitempty"`
	Occupation    Occupation    `protobuf:"varint,23,opt,name=occupation,proto3,enum=pendaftaranpesertabri.Occupation" json:"occupation,omitempty"`
	IncomeLevel   IncomeLevel   `protobuf:"varint,24,opt,name=income_level,json=incomeLevel,proto3,enum=pendaftaranpesertabri.IncomeLevel" json:"income_level,omitempty"`
	MaritalStatus MaritalStatus `protobuf:"varint,25,opt,name=marital_status,json=maritalStatus,proto3,enum=pendaftaranpesertabri.MaritalStatus" json:"marital_status,omitempty"`
	//Format : char(100)
	//Example : "GBU NASABAH SATU"
	SpouseName string `protobuf:"bytes,26,opt,name=spouse_name,json=spouseName,proto3" json:"spouse_name,omitempty"`
	//Investor's Risk Profile
	RiskProfile         RiskProfile         `protobuf:"varint,27,opt,name=risk_profile,json=riskProfile,proto3,enum=pendaftaranpesertabri.RiskProfile" json:"risk_profile,omitempty"`
	InvestmentObjective InvestmentObjective `protobuf:"varint,28,opt,name=investment_objective,json=investmentObjective,proto3,enum=pendaftaranpesertabri.InvestmentObjective" json:"investment_objective,omitempty"`
	SourceOfFund        SourceOfFund        `protobuf:"varint,29,opt,name=source_of_fund,json=sourceOfFund,proto3,enum=pendaftaranpesertabri.SourceOfFund" json:"source_of_fund,omitempty"`
	AssetOwner          AssetOwner          `protobuf:"varint,30,opt,name=asset_owner,json=assetOwner,proto3,enum=pendaftaranpesertabri.AssetOwner" json:"asset_owner,omitempty"`
	//Format : char(100)
	//Example : "CIKOKO"
	KtpAddress string `protobuf:"bytes,31,opt,name=ktp_address,json=ktpAddress,proto3" json:"ktp_address,omitempty"`
	//Format : number(4)
	//Example : "3171"
	KtpCityCode string `protobuf:"bytes,32,opt,name=ktp_city_code,json=ktpCityCode,proto3" json:"ktp_city_code,omitempty"`
	//Format : number(5)
	//Example : "12345"
	KtpPostal string `protobuf:"bytes,33,opt,name=ktp_postal,json=ktpPostal,proto3" json:"ktp_postal,omitempty"`
	//Correspondence Address
	//Format : char(100)
	//Example : "TEBET"
	CorrAddress string `protobuf:"bytes,34,opt,name=corr_address,json=corrAddress,proto3" json:"corr_address,omitempty"`
	//Correspondence City Code
	//Format : number(4)
	//Example : "3171"
	CorrCityCode string `protobuf:"bytes,35,opt,name=corr_city_code,json=corrCityCode,proto3" json:"corr_city_code,omitempty"`
	//Correspondence City Name
	//Format : char(100)
	//Example : "JAKARTA SELATAN"
	CorrCityName string `protobuf:"bytes,36,opt,name=corr_city_name,json=corrCityName,proto3" json:"corr_city_name,omitempty"`
	//Correspondence Postal Code
	//Format : number(5)
	//Example : "12345"
	CorrPostal string `protobuf:"bytes,37,opt,name=corr_postal,json=corrPostal,proto3" json:"corr_postal,omitempty"`
	//Country of Correspondence : ISO Country Code
	//Format : alphabet(2)
	//Example : "ID"
	CorrCountry string `protobuf:"bytes,38,opt,name=corr_country,json=corrCountry,proto3" json:"corr_country,omitempty"`
	//Domicile Address
	//Format : char(100)
	//Example : "TEBET"
	DomAddress string `protobuf:"bytes,39,opt,name=dom_address,json=domAddress,proto3" json:"dom_address,omitempty"`
	//Domicile City Code
	//Format : number(4)
	//Example : "3171"
	DomCityCode string `protobuf:"bytes,40,opt,name=dom_city_code,json=domCityCode,proto3" json:"dom_city_code,omitempty"`
	//Domicile City Name
	//Format : char(100)
	//Example : "JAKARTA SELATAN"
	DomCityName string `protobuf:"bytes,41,opt,name=dom_city_name,json=domCityName,proto3" json:"dom_city_name,omitempty"`
	//Domicile Postal Code
	//Format : number(5)
	//Example : "12345
	DomPostal string `protobuf:"bytes,42,opt,name=dom_postal,json=domPostal,proto3" json:"dom_postal,omitempty"`
	//Country of Domicile
	//Format : alphabet(2)
	//Example : "ID"
	DomCountry string `protobuf:"bytes,43,opt,name=dom_country,json=domCountry,proto3" json:"dom_country,omitempty"`
	//Format : char(30)
	//Example : "65446679"
	HomePhone string `protobuf:"bytes,44,opt,name=home_phone,json=homePhone,proto3" json:"home_phone,omitempty"`
	//Format : char(30)
	//Example : "08111111111"
	MobilePhone string `protobuf:"bytes,45,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	//Format : char(30)
	//Example : "775890"
	Facsimile string `protobuf:"bytes,46,opt,name=facsimile,proto3" json:"facsimile,omitempty"`
	//Format : char(256)
	//Example : "kame@gmail.com"
	Email         string        `protobuf:"bytes,47,opt,name=email,proto3" json:"email,omitempty"`
	StatementType StatementType `protobuf:"varint,48,opt,name=statement_type,json=statementType,proto3,enum=pendaftaranpesertabri.StatementType" json:"statement_type,omitempty"`
	Fatca         Fatca         `protobuf:"varint,49,opt,name=fatca,proto3,enum=pendaftaranpesertabri.Fatca" json:"fatca,omitempty"`
	//TIN or Foreign TIN
	//Format : char(30)
	//Example : "123456789012345678901234567890"
	Tin string `protobuf:"bytes,50,opt,name=tin,proto3" json:"tin,omitempty"`
	//TIN or Foreign TIN Issuance Country : ISO Country Code
	//Format : alphabet(2)
	//Example : "ID"
	TinCountry string `protobuf:"bytes,51,opt,name=tin_country,json=tinCountry,proto3" json:"tin_country,omitempty"`
	//Format : char(30)
	//Example : "123456789012345678901234567890"
	ExternalCifNo string       `protobuf:"bytes,52,opt,name=external_cif_no,json=externalCifNo,proto3" json:"external_cif_no,omitempty"`
	Type          Type         `protobuf:"varint,53,opt,name=type,proto3,enum=pendaftaranpesertabri.Type" json:"type,omitempty"`
	InvestorType  InvestorType `protobuf:"varint,54,opt,name=investor_type,json=investorType,proto3,enum=pendaftaranpesertabri.InvestorType" json:"investor_type,omitempty"`
	//REDM Payment Bank BIC Code 1
	//Format : char(11)
	//Example : "BIC001"
	RedPayBankBic_1 string `protobuf:"bytes,55,opt,name=red_pay_bank_bic_1,json=redPayBankBic1,proto3" json:"red_pay_bank_bic_1,omitempty"`
	//REDM Payment Bank BI Member Code 1
	//Format : char(17)
	//Example : "MC001"
	RedPayBankBi_1 string `protobuf:"bytes,56,opt,name=red_pay_bank_bi_1,json=redPayBankBi1,proto3" json:"red_pay_bank_bi_1,omitempty"`
	//REDM Payment Bank Name 1
	//Format : char(100)
	//Example : "MAYBANK"
	RedPayBankName_1 string `protobuf:"bytes,57,opt,name=red_pay_bank_name_1,json=redPayBankName1,proto3" json:"red_pay_bank_name_1,omitempty"`
	//REDM Payment Bank Country 1
	//Format : alphabet(2)
	//Example : "ID"
	RedPayBankCountry_1 string `protobuf:"bytes,58,opt,name=red_pay_bank_country_1,json=redPayBankCountry1,proto3" json:"red_pay_bank_country_1,omitempty"`
	//REDM Payment Bank Branch 1
	//Format : char(20)
	//Example : "THAMRIN"
	RedPayBankBranch_1 string `protobuf:"bytes,59,opt,name=red_pay_bank_branch_1,json=redPayBankBranch1,proto3" json:"red_pay_bank_branch_1,omitempty"`
	//REDM Payment A/C CCY 1
	//Format : IDR/USD/EUR
	//Example : "IDR"
	RedPayBankAccCcy_1 string `protobuf:"bytes,60,opt,name=red_pay_bank_acc_ccy_1,json=redPayBankAccCcy1,proto3" json:"red_pay_bank_acc_ccy_1,omitempty"`
	//REDM Payment A/C No. 1
	//Format : char(30)
	//Example : "1234567"
	REDM_Payment_ACNo_1 string `protobuf:"bytes,61,opt,name=REDM_Payment_ACNo_1,json=REDMPaymentACNo1,proto3" json:"REDM_Payment_ACNo_1,omitempty"`
	//REDM Payment A/C Name 1
	//Format : char(100)
	//Example : "GBU NASABAH DUA BANK SATU"
	RedPayBankAccName_1 string `protobuf:"bytes,62,opt,name=red_pay_bank_acc_name_1,json=redPayBankAccName1,proto3" json:"red_pay_bank_acc_name_1,omitempty"`
	//REDM Payment Bank BIC Code 2
	//Format : char(11)
	//Example : "BIC002"
	RedPayBankBic_2 string `protobuf:"bytes,63,opt,name=red_pay_bank_bic_2,json=redPayBankBic2,proto3" json:"red_pay_bank_bic_2,omitempty"`
	//REDM Payment Bank BI Member Code 2
	//Format : char(17)
	//Example : "MC02"
	RedPayBankBi_2 string `protobuf:"bytes,64,opt,name=red_pay_bank_bi_2,json=redPayBankBi2,proto3" json:"red_pay_bank_bi_2,omitempty"`
	//REDM Payment Bank Name 2
	//Format : char(100)
	//Example : "BANK RAKYAT INDONESIA"
	RedPayBankName_2 string `protobuf:"bytes,65,opt,name=red_pay_bank_name_2,json=redPayBankName2,proto3" json:"red_pay_bank_name_2,omitempty"`
	//REDM Payment Bank Country 2
	//Format : alphabet(2)
	//Example : "ID"
	RedPayBankCountry_2 string `protobuf:"bytes,66,opt,name=red_pay_bank_country_2,json=redPayBankCountry2,proto3" json:"red_pay_bank_country_2,omitempty"`
	//REDM Payment Bank Branch 2
	//Format : char(20)
	//Example : "THAMRIN"
	RedPayBankBranch_2 string `protobuf:"bytes,67,opt,name=red_pay_bank_branch_2,json=redPayBankBranch2,proto3" json:"red_pay_bank_branch_2,omitempty"`
	//REDM Payment A/C CCY 2
	//Format : IDR/USD/EUR
	//Example : "USD"
	RedPayBankAccCcy_2 string `protobuf:"bytes,68,opt,name=red_pay_bank_acc_ccy_2,json=redPayBankAccCcy2,proto3" json:"red_pay_bank_acc_ccy_2,omitempty"`
	//REDM Payment A/C No. 2
	//Format : char(30)
	//Example : "2345678"
	RedPayBankAccNo_2 string `protobuf:"bytes,69,opt,name=red_pay_bank_acc_no_2,json=redPayBankAccNo2,proto3" json:"red_pay_bank_acc_no_2,omitempty"`
	//REDM Payment A/C Name 2
	//Format : char(100)
	//Example : "GBU NASABAH DUA BANK DUA"
	RedPayBankAccName_2 string `protobuf:"bytes,70,opt,name=red_pay_bank_acc_name_2,json=redPayBankAccName2,proto3" json:"red_pay_bank_acc_name_2,omitempty"`
	//REDM Payment Bank BIC Code 3
	//Format : char(11)
	//Example : "BIC003"
	RedPayBankBic_3 string `protobuf:"bytes,71,opt,name=red_pay_bank_bic_3,json=redPayBankBic3,proto3" json:"red_pay_bank_bic_3,omitempty"`
	//REDM Payment Bank BI Member Code 4
	//Format : char(17)
	//Example : "MC03"
	RedPayBankBi_3 string `protobuf:"bytes,72,opt,name=red_pay_bank_bi_3,json=redPayBankBi3,proto3" json:"red_pay_bank_bi_3,omitempty"`
	//REDM Payment Bank Name 3
	//Format : char(100)
	//Example : "BANK RAKYAT INDONESIA"
	RedPayBankName_3 string `protobuf:"bytes,73,opt,name=red_pay_bank_name_3,json=redPayBankName3,proto3" json:"red_pay_bank_name_3,omitempty"`
	//REDM Payment Bank Country 3
	//Format : alphabet(2)
	//Example : "ID"
	RedPayBankCountry_3 string `protobuf:"bytes,74,opt,name=red_pay_bank_country_3,json=redPayBankCountry3,proto3" json:"red_pay_bank_country_3,omitempty"`
	//REDM Payment Bank Branch 3
	//Format : char(20)
	//Example : "THAMRIN"
	RedPayBankBranch_3 string `protobuf:"bytes,75,opt,name=red_pay_bank_branch_3,json=redPayBankBranch3,proto3" json:"red_pay_bank_branch_3,omitempty"`
	//REDM Payment A/C CCY 3
	//Format : IDR/USD/EUR
	//Example : "USD"
	RedPayBankAccCcy_3 string `protobuf:"bytes,76,opt,name=red_pay_bank_acc_ccy_3,json=redPayBankAccCcy3,proto3" json:"red_pay_bank_acc_ccy_3,omitempty"`
	//REDM Payment A/C No. 3
	//Format : char(30)
	//Example : "3456789"
	RedPayBankAccNo_3 string `protobuf:"bytes,77,opt,name=red_pay_bank_acc_no_3,json=redPayBankAccNo3,proto3" json:"red_pay_bank_acc_no_3,omitempty"`
	//REDM Payment A/C Name 3
	//Format : char(100)
	//Example : "GBU NASABAH DUA BANK TIGA"
	RedPayBankAccName_3 string `protobuf:"bytes,78,opt,name=red_pay_bank_acc_name_3,json=redPayBankAccName3,proto3" json:"red_pay_bank_acc_name_3,omitempty"`
	//Format : char(6)
	//Example : "CL003"
	ClientCode string `protobuf:"bytes,79,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	//Investor Fund Unit A/C No. (Mandatory)
	//Format : char(16)
	//Example : "CL014"
	InvestorFundUnitAcNo string `protobuf:"bytes,80,opt,name=investor_fund_unit_ac_no,json=investorFundUnitAcNo,proto3" json:"investor_fund_unit_ac_no,omitempty"`
	//Investor Number (Mandatory)
	//Format : number(11)
	//Example : "81020710014"
	InvestorNumber string `protobuf:"bytes,81,opt,name=investor_number,json=investorNumber,proto3" json:"investor_number,omitempty"`
}

func (x *PendaftaranPesertaData) Reset() {
	*x = PendaftaranPesertaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendaftaranpesertabri_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendaftaranPesertaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendaftaranPesertaData) ProtoMessage() {}

func (x *PendaftaranPesertaData) ProtoReflect() protoreflect.Message {
	mi := &file_pendaftaranpesertabri_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendaftaranPesertaData.ProtoReflect.Descriptor instead.
func (*PendaftaranPesertaData) Descriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{0}
}

func (x *PendaftaranPesertaData) GetProcessingDate() string {
	if x != nil {
		return x.ProcessingDate
	}
	return ""
}

func (x *PendaftaranPesertaData) GetProcessingTime() string {
	if x != nil {
		return x.ProcessingTime
	}
	return ""
}

func (x *PendaftaranPesertaData) GetSaCode() string {
	if x != nil {
		return x.SaCode
	}
	return ""
}

func (x *PendaftaranPesertaData) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *PendaftaranPesertaData) GetSidGenerationStatus() SIDGenerationStatus {
	if x != nil {
		return x.SidGenerationStatus
	}
	return SIDGenerationStatus_UNKNOWN_SID_GENERATION_STATUS
}

func (x *PendaftaranPesertaData) GetNewSid() string {
	if x != nil {
		return x.NewSid
	}
	return ""
}

func (x *PendaftaranPesertaData) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *PendaftaranPesertaData) GetIdentification() Identification {
	if x != nil {
		return x.Identification
	}
	return Identification_UNKNOWN_IDENTIFICATION
}

func (x *PendaftaranPesertaData) GetIdNo() string {
	if x != nil {
		return x.IdNo
	}
	return ""
}

func (x *PendaftaranPesertaData) GetIdExpDate() string {
	if x != nil {
		return x.IdExpDate
	}
	return ""
}

func (x *PendaftaranPesertaData) GetNpwpNo() string {
	if x != nil {
		return x.NpwpNo
	}
	return ""
}

func (x *PendaftaranPesertaData) GetNpwpDate() string {
	if x != nil {
		return x.NpwpDate
	}
	return ""
}

func (x *PendaftaranPesertaData) GetBirthCountry() string {
	if x != nil {
		return x.BirthCountry
	}
	return ""
}

func (x *PendaftaranPesertaData) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *PendaftaranPesertaData) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *PendaftaranPesertaData) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNKNOWN_GENDER
}

func (x *PendaftaranPesertaData) GetEducationBackground() EducationalBackground {
	if x != nil {
		return x.EducationBackground
	}
	return EducationalBackground_UNKNOWN_EDUCATIONAL_BACKGROUND
}

func (x *PendaftaranPesertaData) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetReligion() Religion {
	if x != nil {
		return x.Religion
	}
	return Religion_UNKNOWN_RELIGION
}

func (x *PendaftaranPesertaData) GetOccupation() Occupation {
	if x != nil {
		return x.Occupation
	}
	return Occupation_UNKNOWN_OCCUPATION
}

func (x *PendaftaranPesertaData) GetIncomeLevel() IncomeLevel {
	if x != nil {
		return x.IncomeLevel
	}
	return IncomeLevel_UNKNOWN_INCOME_LEVEL
}

func (x *PendaftaranPesertaData) GetMaritalStatus() MaritalStatus {
	if x != nil {
		return x.MaritalStatus
	}
	return MaritalStatus_UNKNOWN_MARITALSTATUS
}

func (x *PendaftaranPesertaData) GetSpouseName() string {
	if x != nil {
		return x.SpouseName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRiskProfile() RiskProfile {
	if x != nil {
		return x.RiskProfile
	}
	return RiskProfile_UNKNOWN_RISK_PROFILE
}

func (x *PendaftaranPesertaData) GetInvestmentObjective() InvestmentObjective {
	if x != nil {
		return x.InvestmentObjective
	}
	return InvestmentObjective_UNKNOWN_INVESTMENT_OBJECTIVE
}

func (x *PendaftaranPesertaData) GetSourceOfFund() SourceOfFund {
	if x != nil {
		return x.SourceOfFund
	}
	return SourceOfFund_UNKNOWN_SOURCE_OF_FUND
}

func (x *PendaftaranPesertaData) GetAssetOwner() AssetOwner {
	if x != nil {
		return x.AssetOwner
	}
	return AssetOwner_UNKNOWN_ASSET_OWNER
}

func (x *PendaftaranPesertaData) GetKtpAddress() string {
	if x != nil {
		return x.KtpAddress
	}
	return ""
}

func (x *PendaftaranPesertaData) GetKtpCityCode() string {
	if x != nil {
		return x.KtpCityCode
	}
	return ""
}

func (x *PendaftaranPesertaData) GetKtpPostal() string {
	if x != nil {
		return x.KtpPostal
	}
	return ""
}

func (x *PendaftaranPesertaData) GetCorrAddress() string {
	if x != nil {
		return x.CorrAddress
	}
	return ""
}

func (x *PendaftaranPesertaData) GetCorrCityCode() string {
	if x != nil {
		return x.CorrCityCode
	}
	return ""
}

func (x *PendaftaranPesertaData) GetCorrCityName() string {
	if x != nil {
		return x.CorrCityName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetCorrPostal() string {
	if x != nil {
		return x.CorrPostal
	}
	return ""
}

func (x *PendaftaranPesertaData) GetCorrCountry() string {
	if x != nil {
		return x.CorrCountry
	}
	return ""
}

func (x *PendaftaranPesertaData) GetDomAddress() string {
	if x != nil {
		return x.DomAddress
	}
	return ""
}

func (x *PendaftaranPesertaData) GetDomCityCode() string {
	if x != nil {
		return x.DomCityCode
	}
	return ""
}

func (x *PendaftaranPesertaData) GetDomCityName() string {
	if x != nil {
		return x.DomCityName
	}
	return ""
}

func (x *PendaftaranPesertaData) GetDomPostal() string {
	if x != nil {
		return x.DomPostal
	}
	return ""
}

func (x *PendaftaranPesertaData) GetDomCountry() string {
	if x != nil {
		return x.DomCountry
	}
	return ""
}

func (x *PendaftaranPesertaData) GetHomePhone() string {
	if x != nil {
		return x.HomePhone
	}
	return ""
}

func (x *PendaftaranPesertaData) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *PendaftaranPesertaData) GetFacsimile() string {
	if x != nil {
		return x.Facsimile
	}
	return ""
}

func (x *PendaftaranPesertaData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PendaftaranPesertaData) GetStatementType() StatementType {
	if x != nil {
		return x.StatementType
	}
	return StatementType_UNKNOWN_STATEMENT_TYPE
}

func (x *PendaftaranPesertaData) GetFatca() Fatca {
	if x != nil {
		return x.Fatca
	}
	return Fatca_UNKNOWN_FATCHA
}

func (x *PendaftaranPesertaData) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *PendaftaranPesertaData) GetTinCountry() string {
	if x != nil {
		return x.TinCountry
	}
	return ""
}

func (x *PendaftaranPesertaData) GetExternalCifNo() string {
	if x != nil {
		return x.ExternalCifNo
	}
	return ""
}

func (x *PendaftaranPesertaData) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN_TYPE
}

func (x *PendaftaranPesertaData) GetInvestorType() InvestorType {
	if x != nil {
		return x.InvestorType
	}
	return InvestorType_UNKNOWN_INVESTOR_TYPE
}

func (x *PendaftaranPesertaData) GetRedPayBankBic_1() string {
	if x != nil {
		return x.RedPayBankBic_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBi_1() string {
	if x != nil {
		return x.RedPayBankBi_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankName_1() string {
	if x != nil {
		return x.RedPayBankName_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankCountry_1() string {
	if x != nil {
		return x.RedPayBankCountry_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBranch_1() string {
	if x != nil {
		return x.RedPayBankBranch_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccCcy_1() string {
	if x != nil {
		return x.RedPayBankAccCcy_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetREDM_Payment_ACNo_1() string {
	if x != nil {
		return x.REDM_Payment_ACNo_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccName_1() string {
	if x != nil {
		return x.RedPayBankAccName_1
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBic_2() string {
	if x != nil {
		return x.RedPayBankBic_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBi_2() string {
	if x != nil {
		return x.RedPayBankBi_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankName_2() string {
	if x != nil {
		return x.RedPayBankName_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankCountry_2() string {
	if x != nil {
		return x.RedPayBankCountry_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBranch_2() string {
	if x != nil {
		return x.RedPayBankBranch_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccCcy_2() string {
	if x != nil {
		return x.RedPayBankAccCcy_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccNo_2() string {
	if x != nil {
		return x.RedPayBankAccNo_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccName_2() string {
	if x != nil {
		return x.RedPayBankAccName_2
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBic_3() string {
	if x != nil {
		return x.RedPayBankBic_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBi_3() string {
	if x != nil {
		return x.RedPayBankBi_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankName_3() string {
	if x != nil {
		return x.RedPayBankName_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankCountry_3() string {
	if x != nil {
		return x.RedPayBankCountry_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankBranch_3() string {
	if x != nil {
		return x.RedPayBankBranch_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccCcy_3() string {
	if x != nil {
		return x.RedPayBankAccCcy_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccNo_3() string {
	if x != nil {
		return x.RedPayBankAccNo_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetRedPayBankAccName_3() string {
	if x != nil {
		return x.RedPayBankAccName_3
	}
	return ""
}

func (x *PendaftaranPesertaData) GetClientCode() string {
	if x != nil {
		return x.ClientCode
	}
	return ""
}

func (x *PendaftaranPesertaData) GetInvestorFundUnitAcNo() string {
	if x != nil {
		return x.InvestorFundUnitAcNo
	}
	return ""
}

func (x *PendaftaranPesertaData) GetInvestorNumber() string {
	if x != nil {
		return x.InvestorNumber
	}
	return ""
}

//message data for service Pendaftaran Peserta Response
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//SID : SID peserta based on request data
	//Format : char(15)
	//Example : "GBU114"
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pendaftaranpesertabri_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_pendaftaranpesertabri_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_pendaftaranpesertabri_message_proto_rawDescGZIP(), []int{1}
}

func (x *Data) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

var File_pendaftaranpesertabri_message_proto protoreflect.FileDescriptor

var file_pendaftaranpesertabri_message_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73,
	0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72,
	0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x22, 0xe5, 0x1c, 0x0a,
	0x16, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x50, 0x65, 0x73, 0x65,
	0x72, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61,
	0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x53, 0x49, 0x44, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x13, 0x73, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72,
	0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x69,
	0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x4e, 0x6f,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x70, 0x77, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x70, 0x77, 0x70, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x70, 0x77,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x70,
	0x77, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x14, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65,
	0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x13,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74,
	0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x52,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61,
	0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61,
	0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x69,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x70, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73,
	0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65,
	0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x49, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66,
	0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73,
	0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6b, 0x74, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6b, 0x74, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x74, 0x70, 0x43, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x74, 0x70, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x72, 0x72, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x72, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x43, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6f, 0x6d, 0x43, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6f,
	0x6d, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x43, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x63, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x63, 0x61, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65,
	0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x46, 0x61, 0x74, 0x63, 0x61, 0x52, 0x05,
	0x66, 0x61, 0x74, 0x63, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x6e, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x69, 0x66, 0x4e, 0x6f,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65,
	0x72, 0x74, 0x61, 0x62, 0x72, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x66, 0x74, 0x61, 0x72, 0x61, 0x6e, 0x70, 0x65, 0x73, 0x65, 0x72, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x12, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x63, 0x5f,
	0x31, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x42, 0x69, 0x63, 0x31, 0x12, 0x28, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x5f, 0x31, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x69,
	0x31, 0x12, 0x2c, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12,
	0x32, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x31, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x31, 0x12, 0x30, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x31, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x31, 0x12, 0x31, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x63, 0x63, 0x79, 0x5f, 0x31, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x43, 0x63, 0x79, 0x31, 0x12, 0x2d, 0x0a, 0x13, 0x52, 0x45, 0x44, 0x4d,
	0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x43, 0x4e, 0x6f, 0x5f, 0x31, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x45, 0x44, 0x4d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x43, 0x4e, 0x6f, 0x31, 0x12, 0x33, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x31, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x2a, 0x0a, 0x12,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x63,
	0x5f, 0x32, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x69, 0x63, 0x32, 0x12, 0x28, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x5f, 0x32, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x69, 0x32, 0x12, 0x2c, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x32, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x12, 0x32, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x32, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x32, 0x12, 0x30, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x32, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x32, 0x12, 0x31, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x63, 0x63, 0x79, 0x5f, 0x32,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x43, 0x63, 0x79, 0x32, 0x12, 0x2f, 0x0a, 0x15, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6e, 0x6f,
	0x5f, 0x32, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x4e, 0x6f, 0x32, 0x12, 0x33, 0x0a, 0x17, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x32, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12,
	0x2a, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x62, 0x69, 0x63, 0x5f, 0x33, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x69, 0x63, 0x33, 0x12, 0x28, 0x0a, 0x11, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x69, 0x5f, 0x33,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x69, 0x33, 0x12, 0x2c, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x33, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x33, 0x12, 0x32, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x33, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x33, 0x12, 0x30, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x33,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x33, 0x12, 0x31, 0x0a, 0x16, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x63, 0x63,
	0x79, 0x5f, 0x33, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x43, 0x63, 0x79, 0x33, 0x12, 0x2f, 0x0a, 0x15,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63,
	0x5f, 0x6e, 0x6f, 0x5f, 0x33, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x4e, 0x6f, 0x33, 0x12, 0x33, 0x0a,
	0x17, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x33, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x5f, 0x6e, 0x6f, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46,
	0x75, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x18, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x2a, 0x5b,
	0x0a, 0x13, 0x53, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x0e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x54, 0x50,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02,
	0x2a, 0x32, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x02, 0x2a, 0xea, 0x01, 0x0a, 0x15, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x1e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x43,
	0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x55, 0x4e, 0x49, 0x4f, 0x52,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x4e, 0x49, 0x4f, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x53, 0x43,
	0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x50, 0x4c, 0x4f, 0x4d,
	0x41, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x47, 0x52, 0x41, 0x44,
	0x55, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x47,
	0x52, 0x41, 0x44, 0x55, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x43,
	0x54, 0x4f, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x07, 0x12,
	0x20, 0x0a, 0x1c, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x08, 0x2a, 0x8a, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x47, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x53, 0x4c, 0x41, 0x4d, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x48, 0x4f, 0x4c, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x49, 0x4e, 0x44, 0x55, 0x49, 0x53, 0x4d, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x55, 0x44, 0x48, 0x49, 0x53, 0x4d, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x46,
	0x55, 0x43, 0x49, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0xe8,
	0x01, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x57, 0x49, 0x46, 0x45, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x45, 0x4e, 0x45, 0x55,
	0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x49, 0x56, 0x49, 0x4c, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x44, 0x4f, 0x4e, 0x45,
	0x53, 0x49, 0x41, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x52,
	0x5f, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45,
	0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x50, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x2a, 0x97, 0x02, 0x0a, 0x0b, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x31, 0x30, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x59, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45,
	0x4e, 0x5f, 0x31, 0x30, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x35, 0x30, 0x5f, 0x4d, 0x49,
	0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x02,
	0x12, 0x29, 0x0a, 0x25, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x35, 0x30, 0x5f, 0x55,
	0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x42,
	0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c,
	0x5f, 0x35, 0x30, 0x30, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x45, 0x54, 0x57, 0x45,
	0x45, 0x4e, 0x5f, 0x35, 0x30, 0x30, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x31, 0x5f, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x31,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x59, 0x45, 0x41,
	0x52, 0x10, 0x06, 0x2a, 0x50, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x4d, 0x41, 0x52, 0x49, 0x54, 0x41, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x56, 0x4f,
	0x52, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x57, 0x5f, 0x54,
	0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f,
	0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x2a, 0xac, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x52,
	0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x2a, 0xf6, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46,
	0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x56, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x55, 0x4e, 0x44,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x52,
	0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x48, 0x55, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x57,
	0x49, 0x46, 0x45, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10,
	0x0a, 0x2a, 0x4f, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x59, 0x53, 0x45,
	0x4c, 0x46, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59,
	0x10, 0x02, 0x2a, 0x49, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x48, 0x41, 0x52, 0x44, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0xb7, 0x01,
	0x0a, 0x05, 0x46, 0x61, 0x74, 0x63, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x46, 0x41, 0x54, 0x43, 0x48, 0x41, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2f, 0x0a,
	0x2b, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x49, 0x54, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x49, 0x41, 0x10, 0x03, 0x12, 0x32,
	0x0a, 0x2e, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x49, 0x54, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x49, 0x41,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x4d, 0x45, 0x4e, 0x44, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49,
	0x44, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x54,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x04, 0x5a, 0x02, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pendaftaranpesertabri_message_proto_rawDescOnce sync.Once
	file_pendaftaranpesertabri_message_proto_rawDescData = file_pendaftaranpesertabri_message_proto_rawDesc
)

func file_pendaftaranpesertabri_message_proto_rawDescGZIP() []byte {
	file_pendaftaranpesertabri_message_proto_rawDescOnce.Do(func() {
		file_pendaftaranpesertabri_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_pendaftaranpesertabri_message_proto_rawDescData)
	})
	return file_pendaftaranpesertabri_message_proto_rawDescData
}

var file_pendaftaranpesertabri_message_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_pendaftaranpesertabri_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pendaftaranpesertabri_message_proto_goTypes = []interface{}{
	(SIDGenerationStatus)(0),       // 0: pendaftaranpesertabri.SIDGenerationStatus
	(Identification)(0),            // 1: pendaftaranpesertabri.Identification
	(Gender)(0),                    // 2: pendaftaranpesertabri.Gender
	(EducationalBackground)(0),     // 3: pendaftaranpesertabri.EducationalBackground
	(Religion)(0),                  // 4: pendaftaranpesertabri.Religion
	(Occupation)(0),                // 5: pendaftaranpesertabri.Occupation
	(IncomeLevel)(0),               // 6: pendaftaranpesertabri.IncomeLevel
	(MaritalStatus)(0),             // 7: pendaftaranpesertabri.MaritalStatus
	(RiskProfile)(0),               // 8: pendaftaranpesertabri.RiskProfile
	(InvestmentObjective)(0),       // 9: pendaftaranpesertabri.InvestmentObjective
	(SourceOfFund)(0),              // 10: pendaftaranpesertabri.SourceOfFund
	(AssetOwner)(0),                // 11: pendaftaranpesertabri.AssetOwner
	(StatementType)(0),             // 12: pendaftaranpesertabri.StatementType
	(Fatca)(0),                     // 13: pendaftaranpesertabri.Fatca
	(Type)(0),                      // 14: pendaftaranpesertabri.Type
	(InvestorType)(0),              // 15: pendaftaranpesertabri.InvestorType
	(*PendaftaranPesertaData)(nil), // 16: pendaftaranpesertabri.PendaftaranPesertaData
	(*Data)(nil),                   // 17: pendaftaranpesertabri.Data
}
var file_pendaftaranpesertabri_message_proto_depIdxs = []int32{
	0,  // 0: pendaftaranpesertabri.PendaftaranPesertaData.sid_generation_status:type_name -> pendaftaranpesertabri.SIDGenerationStatus
	1,  // 1: pendaftaranpesertabri.PendaftaranPesertaData.identification:type_name -> pendaftaranpesertabri.Identification
	2,  // 2: pendaftaranpesertabri.PendaftaranPesertaData.gender:type_name -> pendaftaranpesertabri.Gender
	3,  // 3: pendaftaranpesertabri.PendaftaranPesertaData.education_background:type_name -> pendaftaranpesertabri.EducationalBackground
	4,  // 4: pendaftaranpesertabri.PendaftaranPesertaData.religion:type_name -> pendaftaranpesertabri.Religion
	5,  // 5: pendaftaranpesertabri.PendaftaranPesertaData.occupation:type_name -> pendaftaranpesertabri.Occupation
	6,  // 6: pendaftaranpesertabri.PendaftaranPesertaData.income_level:type_name -> pendaftaranpesertabri.IncomeLevel
	7,  // 7: pendaftaranpesertabri.PendaftaranPesertaData.marital_status:type_name -> pendaftaranpesertabri.MaritalStatus
	8,  // 8: pendaftaranpesertabri.PendaftaranPesertaData.risk_profile:type_name -> pendaftaranpesertabri.RiskProfile
	9,  // 9: pendaftaranpesertabri.PendaftaranPesertaData.investment_objective:type_name -> pendaftaranpesertabri.InvestmentObjective
	10, // 10: pendaftaranpesertabri.PendaftaranPesertaData.source_of_fund:type_name -> pendaftaranpesertabri.SourceOfFund
	11, // 11: pendaftaranpesertabri.PendaftaranPesertaData.asset_owner:type_name -> pendaftaranpesertabri.AssetOwner
	12, // 12: pendaftaranpesertabri.PendaftaranPesertaData.statement_type:type_name -> pendaftaranpesertabri.StatementType
	13, // 13: pendaftaranpesertabri.PendaftaranPesertaData.fatca:type_name -> pendaftaranpesertabri.Fatca
	14, // 14: pendaftaranpesertabri.PendaftaranPesertaData.type:type_name -> pendaftaranpesertabri.Type
	15, // 15: pendaftaranpesertabri.PendaftaranPesertaData.investor_type:type_name -> pendaftaranpesertabri.InvestorType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pendaftaranpesertabri_message_proto_init() }
func file_pendaftaranpesertabri_message_proto_init() {
	if File_pendaftaranpesertabri_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pendaftaranpesertabri_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendaftaranPesertaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pendaftaranpesertabri_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pendaftaranpesertabri_message_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pendaftaranpesertabri_message_proto_goTypes,
		DependencyIndexes: file_pendaftaranpesertabri_message_proto_depIdxs,
		EnumInfos:         file_pendaftaranpesertabri_message_proto_enumTypes,
		MessageInfos:      file_pendaftaranpesertabri_message_proto_msgTypes,
	}.Build()
	File_pendaftaranpesertabri_message_proto = out.File
	file_pendaftaranpesertabri_message_proto_rawDesc = nil
	file_pendaftaranpesertabri_message_proto_goTypes = nil
	file_pendaftaranpesertabri_message_proto_depIdxs = nil
}
